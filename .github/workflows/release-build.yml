name: Release Build

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "JDK Version (e.g., 8.0.123)"
        required: false
        type: string

jobs:
  prerequisites:
    name: Setup Prerequisites
    runs-on: "ubuntu-22.04"
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: Checkout the source
        uses: actions/checkout@v4

      - name: Set version
        id: set_version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            version=$(cat common/autoconf/version-numbers | grep -E '^JDK_VERSION|^JDK_MAJOR_VERSION|^JDK_MINOR_VERSION|^JDK_MICRO_VERSION' | sed -e 's/#.*//g' -e 's/"//g' -e 's/\([A-Z_]*\)=\(.*\)/\2/g' | tr '\n' '.' | sed 's/\.$//')
            echo "version=${version}" >> $GITHUB_OUTPUT
            echo "Detected JDK version: ${version}"
          fi

      - name: Determine unique bundle identifier
        id: check_bundle_id
        run: echo "bundle_id=${GITHUB_ACTOR}_${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

      - name: Determine versions and locations to be used for dependencies
        id: check_deps
        run: "echo dependencies=`cat common/autoconf/version-numbers make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\"//g' -e 's/\\(.*\\)=\\(.*\\)/\"\\1\": \"\\2\",/g' -e '$s/,\\s\\{0,\\}$/\\}/'` >> $GITHUB_OUTPUT"

      - name: Print extracted dependencies to the log
        run: "echo '${{ steps.check_deps.outputs.dependencies }}'"

      - name: Determine the jtreg ref to checkout
        run: "echo JTREG_REF=jtreg${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV"

      - name: Check if a jtreg image is present in the cache
        id: jtreg
        uses: actions/cache@v4
        with:
          path: ~/jtreg/
          key: jtreg-${{ env.JTREG_REF }}-v1

      - name: Checkout the jtreg source
        uses: actions/checkout@v4
        with:
          repository: "openjdk/jtreg"
          ref: ${{ env.JTREG_REF }}
          path: jtreg
        if: steps.jtreg.outputs.cache-hit != 'true'

      - name: Build jtreg
        run: bash make/build-all.sh ${JAVA_HOME_8_X64}
        working-directory: jtreg
        if: steps.jtreg.outputs.cache-hit != 'true'

      - name: Move jtreg image to destination folder
        run: mv build/images/jtreg ~/
        working-directory: jtreg
        if: steps.jtreg.outputs.cache-hit != 'true'

      - name: Store jtreg for use by later steps
        uses: actions/upload-artifact@v4
        with:
          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}
          path: ~/jtreg/

  linux_x64_build:
    name: Linux x64 Build
    runs-on: "ubuntu-22.04"
    needs: prerequisites

    env:
      JDK_VERSION: ${{ needs.prerequisites.outputs.version }}

    steps:
      - name: Checkout the source
        uses: actions/checkout@v4

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix jtreg permissions
        run: chmod -R a+rx ${HOME}/jtreg/

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk gcc-9 g++-9 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9

      - name: Configure
        run: >
          bash configure
          --with-conf-name=linux-x64
          --with-build-number=b00
          --with-jtreg=${HOME}/jtreg
          --with-zlib=bundled

      - name: Build
        run: make CONF_NAME=linux-x64 LOG_LEVEL=debug images

      - name: Pack artifacts
        run: |
          cd build/linux-x64/images
          zip -r jdk8-${{ env.JDK_VERSION }}_linux-x64.zip j2sdk-image
          cp jdk8-${{ env.JDK_VERSION }}_linux-x64.zip $GITHUB_WORKSPACE/

      - name: Upload artifacts to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./jdk8-${{ env.JDK_VERSION }}_linux-x64.zip
          asset_name: jdk8-${{ env.JDK_VERSION }}_linux-x64.zip
          asset_content_type: application/zip

      - name: Upload artifacts as workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jdk8-${{ env.JDK_VERSION }}_linux-x64
          path: jdk8-${{ env.JDK_VERSION }}_linux-x64.zip
          if-no-files-found: error

  windows_x64_build:
    name: Windows x64 Build
    runs-on: "windows-2022"
    needs: prerequisites

    env:
      JDK_VERSION: ${{ needs.prerequisites.outputs.version }}
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}"
      VS2017_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_FILENAME }}"
      VS2017_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_URL }}"
      VS2017_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_SHA256 }}"

    steps:
      - name: Restore cygwin installer from cache
        id: cygwin-installer
        uses: actions/cache@v4
        with:
          path: ~/cygwin/setup-x86_64.exe
          key: cygwin-installer

      - name: Download cygwin installer
        run: |
          New-Item -Force -ItemType directory -Path "$HOME\cygwin"
          & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"
        if: steps.cygwin-installer.outputs.cache-hit != 'true'

      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v4
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

      - name: Checkout the source
        uses: actions/checkout@v4

      - name: Checkout the FreeType source
        uses: actions/checkout@v4
        with:
          repository: "freetype/freetype"
          ref: VER-2-8-1
          path: freetype

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v4
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
          & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
          Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "$HOME\bootjdk\$env:BOOT_JDK_VERSION"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore Visual Studio 2017 from cache
        id: vs2017
        uses: actions/cache@v4
        with:
          path: ~/${{ env.VS2017_FILENAME }}
          key: vs2017

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Uninstall WinSDKs
        run: >
          Start-Process -FilePath 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' -Wait -NoNewWindow -ArgumentList
          'modify --installPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
          --remove Microsoft.VisualStudio.Component.Windows10SDK.18362
          --remove Microsoft.VisualStudio.Component.Windows10SDK.19041
          --remove Microsoft.VisualStudio.Component.Windows10SDK.20348
          --remove Microsoft.VisualStudio.Component.Windows10SDK.22000
          --quiet'

      - name: Download Visual Studio 2017
        run: |
          curl -L "$env:VS2017_URL" -o "$HOME/$env:VS2017_FILENAME"
        if: steps.vs2017.outputs.cache-hit != 'true'

      - name: Install Visual Studio 2017
        run: >
          Start-Process -FilePath "$HOME\$env:VS2017_FILENAME" -Wait -NoNewWindow -ArgumentList
          'install --productId Microsoft.VisualStudio.Product.Community --channelId VisualStudio.15.Release
          --add Microsoft.VisualStudio.Workload.NativeDesktop
          --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          --add Microsoft.VisualStudio.Component.Windows10SDK.17763
          --quiet --wait'

      - name: Fix OpenJDK permissions
        run: bash -c "chmod -R 0777 ."

      - name: Copy FreeType project file
        run: >
          Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;
          Copy-Item -Path "$env:GITHUB_WORKSPACE\.github\workflows\freetype.vcxproj"
          -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj" ;

      - name: Configure
        run: >
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION" ;
          $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ;
          $env:JT_HOME = cygpath "$HOME/jtreg" ;
          & bash configure
          --with-toolchain-version=2017
          --with-conf-name=windows-x64
          --with-build-number=b00
          --with-boot-jdk="$env:BOOT_JDK"
          --with-freetype-src="$env:FREETYPE_HOME"
          --with-jtreg="$env:JT_HOME" ;
          bash -c "cat $(find -name config.log)"

      - name: Build
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path" ;
          $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join ";" ;
          & make CONF_NAME=windows-x64 FORCE_MSC_VER=1912 FORCE_LD_VER=1412 images

      - name: Pack artifacts
        run: |
          $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ;
          cd build/windows-x64/images
          & zip -r jdk8-${{ env.JDK_VERSION }}_windows-x64.zip j2sdk-image
          & copy jdk8-${{ env.JDK_VERSION }}_windows-x64.zip $env:GITHUB_WORKSPACE/

      - name: Upload artifacts to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./jdk8-${{ env.JDK_VERSION }}_windows-x64.zip
          asset_name: jdk8-${{ env.JDK_VERSION }}_windows-x64.zip
          asset_content_type: application/zip

      - name: Upload artifacts as workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jdk8-${{ env.JDK_VERSION }}_windows-x64
          path: ./jdk8-${{ env.JDK_VERSION }}_windows-x64.zip
          if-no-files-found: error

  macos_x64_build:
    name: macOS x64 Build
    runs-on: "macos-13"
    needs: prerequisites

    env:
      JDK_VERSION: ${{ needs.prerequisites.outputs.version }}
      BOOT_JDK_VERSION: "${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}"
      BOOT_JDK_FILENAME: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}"
      BOOT_JDK_URL: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}"
      BOOT_JDK_SHA256: "${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}"

    steps:
      - name: Checkout the source
        uses: actions/checkout@v4

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v4
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true
          wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"
          echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a 256 -c >/dev/null -
          tar -xzf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"
          mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v4
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix jtreg permissions
        run: chmod -R a+rx ${HOME}/jtreg/

      - name: Install dependencies
        run: brew install make gawk

      - name: Select Xcode version
        run: sudo xcode-select --switch /Applications/Xcode_14.3.1.app/Contents/Developer

      - name: Checkout the FreeType source
        uses: actions/checkout@v4
        with:
          repository: "freetype/freetype"
          ref: VER-2-8-1
          path: freetype

      - name: Configure
        run: >
          bash configure
          --with-conf-name=macos-x64
          --with-build-number=b00
          --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home
          --with-jtreg=${HOME}/jtreg
          --with-zlib=system

      - name: Build
        run: make CONF_NAME=macos-x64 images

      - name: Check Homebrew prefix and verify freetype installation
        run: |
          echo "🏗️ Homebrew prefix: $(brew --prefix)"
          if brew list freetype &>/dev/null; then
            echo "✅ freetype is installed"
            brew info freetype
          else
            echo "❌ freetype is not installed"
            exit 1
          fi

      - name: Copy freetype dylib into JDK image
        run: |
          if [ -f /opt/homebrew/opt/freetype/lib/libfreetype.6.dylib ]; then
            cp /opt/homebrew/opt/freetype/lib/libfreetype.6.dylib build/macos-x64/images/j2sdk-image/jre/lib/
            cp /opt/homebrew/opt/libpng/lib/libpng16.16.dylib build/macos-x64/images/j2sdk-image/jre/lib/
          elif [ -f /usr/local/opt/freetype/lib/libfreetype.6.dylib ]; then
            cp /usr/local/opt/freetype/lib/libfreetype.6.dylib build/macos-x64/images/j2sdk-image/jre/lib/
            cp /usr/local/opt/libpng/lib/libpng16.16.dylib build/macos-x64/images/j2sdk-image/jre/lib/
          else
            echo "libfreetype.6.dylib not found" && exit 1
          fi

      - name: Patch libfontmanager.dylib to use local freetype
        run: |
          if otool -L build/macos-x64/images/j2sdk-image/jre/lib/libfontmanager.dylib | grep -q "/usr/local/opt/freetype/lib/libfreetype.6.dylib"; then
            install_name_tool -change /usr/local/opt/freetype/lib/libfreetype.6.dylib \
              @rpath/libfreetype.6.dylib \
              build/macos-x64/images/j2sdk-image/jre/lib/libfontmanager.dylib
            install_name_tool -change /usr/local/opt/libpng/lib/libpng16.16.dylib \
              @rpath/libpng16.16.dylib \
              build/macos-x64/images/j2sdk-image/jre/lib/libfreetype.6.dylib
          elif otool -L build/macos-x64/images/j2sdk-image/jre/lib/libfontmanager.dylib | grep -q "/opt/homebrew/opt/freetype/lib/libfreetype.6.dylib"; then
            install_name_tool -change /opt/homebrew/opt/freetype/lib/libfreetype.6.dylib \
              @rpath/libfreetype.6.dylib \
              build/macos-x64/images/j2sdk-image/jre/lib/libfontmanager.dylib
            install_name_tool -change /opt/homebrew/opt/libpng/lib/libpng16.16.dylib \
              @rpath/libpng16.16.dylib \
              build/macos-x64/images/j2sdk-image/jre/lib/libfreetype.6.dylib
          else
            echo "Unknown freetype linkage in libfontmanager.dylib" && exit 1
          fi

      - name: Pack artifacts
        run: |
          cd build/macos-x64/images
          zip -r jdk8-${{ env.JDK_VERSION }}_macos-x64.zip j2sdk-image
          cp jdk8-${{ env.JDK_VERSION }}_macos-x64.zip $GITHUB_WORKSPACE/

      - name: Upload artifacts to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./jdk8-${{ env.JDK_VERSION }}_macos-x64.zip
          asset_name: jdk8-${{ env.JDK_VERSION }}_macos-x64.zip
          asset_content_type: application/zip

      - name: Upload artifacts as workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jdk8-${{ env.JDK_VERSION }}_macos-x64
          path: ./jdk8-${{ env.JDK_VERSION }}_macos-x64.zip
          if-no-files-found: error

  cleanup:
    name: Cleanup Transient Artifacts
    runs-on: "ubuntu-22.04"
    needs: 
      - prerequisites
      - linux_x64_build
      - windows_x64_build
      - macos_x64_build
    if: always()

    steps:
      - name: Delete transient artifacts
        run: |
          # Find and remove all transient artifacts
          ALL_ARTIFACT_IDS="$(curl -sL \
              -H 'Accept: application/vnd.github+json' \
              -H 'Authorization: Bearer ${{ github.token }}' \
              -H 'X-GitHub-Api-Version: 2022-11-28' \
              '${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts?per_page=100')"
          TRANSIENT_ARTIFACT_IDS="$(echo "$ALL_ARTIFACT_IDS" | jq -r -c '.artifacts | map(select(.name|startswith("transient_"))) | .[].id')"
          for id in $TRANSIENT_ARTIFACT_IDS; do
            echo "Removing transient artifact $id"
            curl -sL \
                -X DELETE \
                -H 'Accept: application/vnd.github+json' \
                -H 'Authorization: Bearer ${{ github.token }}' \
                -H 'X-GitHub-Api-Version: 2022-11-28' \
                "${{ github.api_url }}/repos/${{ github.repository }}/actions/artifacts/$id" \
            || echo "Failed to remove artifact"
          done
